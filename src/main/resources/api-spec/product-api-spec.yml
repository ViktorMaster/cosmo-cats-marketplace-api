openapi: 3.0.1
info:
  title: Product API
  description: API for managing products
  version: 1.0.0
paths:
  /api/v1/products:
    get:
      summary: Retrieve a list of all products
      operationId: getProducts
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDto'


  /api/v1/products/{id}:
    get:
      summary: Retrieve a product by its ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

    delete:
      summary: Delete a product
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the product to delete
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /api/v1/products/category/{id}:
    post:
      summary: Create a new product
      operationId: createProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Category ID for the product
      requestBody:
        description: Product creation details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreationDto'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /api/v1/products/{id}/category/{categoryId}:
    put:
      summary: Update a product
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the product to update
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: Category ID to assign to the product
      requestBody:
        description: Product update details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreationDto'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

components:
  schemas:
    ProductDto:
      type: object
      properties:
        name:
          type: string
          example: "Product Name"
        description:
          type: string
          example: "Product Description"
        price:
          type: number
          format: float
          example: 99.99
        categoryId:
          type: number
          format: long
          example: 1

    ProductCreationDto:
      type: object
      required:
        - name
        - description
        - price
      properties:
        name:
          type: string
          example: "New Product"
          minLength: 3
          maxLength: 100
        description:
          type: string
          maxLength: 255
          example: "New Product Description"
        price:
          type: number
          format: float
          minimum: 0.01
          example: 49.99

    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          example: "product-not-found"
        title:
          type: string
          example: "Product not found"
        detail:
          type: string
          example: "The product with the given ID was not found."
        status:
          type: integer
          example: 404
