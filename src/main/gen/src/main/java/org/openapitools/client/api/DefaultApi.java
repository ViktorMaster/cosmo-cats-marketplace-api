/*
 * Product API
 * API for managing products
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProblemDetail;
import org.openapitools.client.model.ProductCreationDto;
import org.openapitools.client.model.ProductDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createProduct
     * @param id Category ID for the product (required)
     * @param productCreationDto Product creation details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(Long id, ProductCreationDto productCreationDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreationDto;

        // create path and map variables
        String localVarPath = "/api/v1/products/category/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(Long id, ProductCreationDto productCreationDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createProduct(Async)");
        }
        
        // verify the required parameter 'productCreationDto' is set
        if (productCreationDto == null) {
            throw new ApiException("Missing the required parameter 'productCreationDto' when calling createProduct(Async)");
        }
        

        okhttp3.Call localVarCall = createProductCall(id, productCreationDto, _callback);
        return localVarCall;

    }

    /**
     * Create a new product
     * 
     * @param id Category ID for the product (required)
     * @param productCreationDto Product creation details (required)
     * @return ProductDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public ProductDto createProduct(Long id, ProductCreationDto productCreationDto) throws ApiException {
        ApiResponse<ProductDto> localVarResp = createProductWithHttpInfo(id, productCreationDto);
        return localVarResp.getData();
    }

    /**
     * Create a new product
     * 
     * @param id Category ID for the product (required)
     * @param productCreationDto Product creation details (required)
     * @return ApiResponse&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDto> createProductWithHttpInfo(Long id, ProductCreationDto productCreationDto) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(id, productCreationDto, null);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new product (asynchronously)
     * 
     * @param id Category ID for the product (required)
     * @param productCreationDto Product creation details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Product created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(Long id, ProductCreationDto productCreationDto, final ApiCallback<ProductDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(id, productCreationDto, _callback);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProduct
     * @param id ID of the product to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProduct(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a product
     * 
     * @param id ID of the product to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProduct(Long id) throws ApiException {
        deleteProductWithHttpInfo(id);
    }

    /**
     * Delete a product
     * 
     * @param id ID of the product to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a product (asynchronously)
     * 
     * @param id ID of the product to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProduct
     * @param id ID of the product to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProduct(Async)");
        }
        

        okhttp3.Call localVarCall = getProductCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a product by its ID
     * 
     * @param id ID of the product to retrieve (required)
     * @return ProductDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ProductDto getProduct(Long id) throws ApiException {
        ApiResponse<ProductDto> localVarResp = getProductWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a product by its ID
     * 
     * @param id ID of the product to retrieve (required)
     * @return ApiResponse&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDto> getProductWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getProductValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a product by its ID (asynchronously)
     * 
     * @param id ID of the product to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductAsync(Long id, final ApiCallback<ProductDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProducts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getProductsCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieve a list of all products
     * 
     * @return List&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductDto> getProducts() throws ApiException {
        ApiResponse<List<ProductDto>> localVarResp = getProductsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of all products
     * 
     * @return ApiResponse&lt;List&lt;ProductDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductDto>> getProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProductDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of all products (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsAsync(final ApiCallback<List<ProductDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProductDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param id ID of the product to update (required)
     * @param categoryId Category ID to assign to the product (required)
     * @param productCreationDto Product update details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(Long id, Long categoryId, ProductCreationDto productCreationDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productCreationDto;

        // create path and map variables
        String localVarPath = "/api/v1/products/{id}/category/{categoryId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "categoryId" + "\\}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(Long id, Long categoryId, ProductCreationDto productCreationDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'productCreationDto' is set
        if (productCreationDto == null) {
            throw new ApiException("Missing the required parameter 'productCreationDto' when calling updateProduct(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductCall(id, categoryId, productCreationDto, _callback);
        return localVarCall;

    }

    /**
     * Update a product
     * 
     * @param id ID of the product to update (required)
     * @param categoryId Category ID to assign to the product (required)
     * @param productCreationDto Product update details (required)
     * @return ProductDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ProductDto updateProduct(Long id, Long categoryId, ProductCreationDto productCreationDto) throws ApiException {
        ApiResponse<ProductDto> localVarResp = updateProductWithHttpInfo(id, categoryId, productCreationDto);
        return localVarResp.getData();
    }

    /**
     * Update a product
     * 
     * @param id ID of the product to update (required)
     * @param categoryId Category ID to assign to the product (required)
     * @param productCreationDto Product update details (required)
     * @return ApiResponse&lt;ProductDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDto> updateProductWithHttpInfo(Long id, Long categoryId, ProductCreationDto productCreationDto) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(id, categoryId, productCreationDto, null);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a product (asynchronously)
     * 
     * @param id ID of the product to update (required)
     * @param categoryId Category ID to assign to the product (required)
     * @param productCreationDto Product update details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(Long id, Long categoryId, ProductCreationDto productCreationDto, final ApiCallback<ProductDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(id, categoryId, productCreationDto, _callback);
        Type localVarReturnType = new TypeToken<ProductDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
