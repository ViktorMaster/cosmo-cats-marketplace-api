openapi: 3.0.1
info:
  description: API for managing products
  title: Product API
  version: 1.0.0
servers:
- url: /
paths:
  /api/v1/products:
    get:
      operationId: getProducts
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProductDto'
                type: array
          description: A list of products
      summary: Retrieve a list of all products
      x-accepts: application/json
  /api/v1/products/{id}:
    delete:
      operationId: deleteProduct
      parameters:
      - description: ID of the product to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: Product deleted successfully
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Product not found
      summary: Delete a product
      x-accepts: application/json
    get:
      operationId: getProduct
      parameters:
      - description: ID of the product to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
          description: Product details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Product not found
      summary: Retrieve a product by its ID
      x-accepts: application/json
  /api/v1/products/category/{id}:
    post:
      operationId: createProduct
      parameters:
      - description: Category ID for the product
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreationDto'
        description: Product creation details
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
          description: Product created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Validation failed
      summary: Create a new product
      x-content-type: application/json
      x-accepts: application/json
  /api/v1/products/{id}/category/{categoryId}:
    put:
      operationId: updateProduct
      parameters:
      - description: ID of the product to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Category ID to assign to the product
        explode: false
        in: path
        name: categoryId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreationDto'
        description: Product update details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
          description: Product updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Validation failed
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
          description: Product not found
      summary: Update a product
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    ProductDto:
      example:
        price: 99.99
        name: Product Name
        description: Product Description
        categoryId: 1
      properties:
        name:
          example: Product Name
          type: string
        description:
          example: Product Description
          type: string
        price:
          example: 99.99
          format: float
          type: number
        categoryId:
          example: 1
          format: long
          type: number
      type: object
    ProductCreationDto:
      example:
        price: 49.99
        name: New Product
        description: New Product Description
      properties:
        name:
          example: New Product
          maxLength: 100
          minLength: 3
          type: string
        description:
          example: New Product Description
          maxLength: 255
          type: string
        price:
          example: 49.99
          format: float
          minimum: 0.01
          type: number
      required:
      - description
      - name
      - price
      type: object
    ProblemDetail:
      properties:
        type:
          example: product-not-found
          format: uri
          type: string
        title:
          example: Product not found
          type: string
        detail:
          example: The product with the given ID was not found.
          type: string
        status:
          example: 404
          type: integer
      type: object

